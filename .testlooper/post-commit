#!/usr/bin/env python
# This is placed in the .git/hooks directory of the local repo and used to POST whenever something changes.
# TODO use either a config file, or ODB, or an env var to store the port


import requests
import subprocess
import os

GIT_WATCHER_PORT = 9999

port = os.getenv('GIT_WATCHER_PORT', GIT_WATCHER_PORT)
endpoint_name = os.getenv('GIT_WATCHER_ENDPOINT_NAME', 'git_updater')

def post_commit():
    commit_id = subprocess.check_output(['git', 'rev-parse', 'HEAD']).decode().strip()
    author_name = subprocess.check_output(['git', 'log', '-1', '--pretty=format:%an']).decode().strip()
    author_email = subprocess.check_output(['git', 'log', '-1', '--pretty=format:%ae']).decode().strip()
    commit_message = subprocess.check_output(['git', 'log', '-1', '--pretty=format:%s']).decode().strip()
    repository = os.path.basename(subprocess.check_output(['git', 'rev-parse', '--show-toplevel']).decode().strip())
    branch = subprocess.check_output(['git', 'rev-parse', '--abbrev-ref', 'HEAD']).decode().strip()
    # before_commit_id = subprocess.check_output(['git', 'rev-parse', 'HEAD~1']).decode().strip()

    data = {
        'ref': f'refs/heads/{branch}',
        # 'before': before_commit_id,
        'after': commit_id,
        'repository': {
            'name': repository,
            'url': f'http://localhost:{port}/{repository}.git',  # this is fake
        },
        'pusher': {
            'name': author_name,
            'email': author_email,
        },
        'commits': [{
            'id': commit_id,
            'message': commit_message,
            'url': f'http://localhost:{port}/{repository}/commit/{commit_id}',  # this is fake
            'author': {
                'name': author_name,
                'email': author_email,
            },
        }]
    }
    requests.post(f'http://localhost:{port}/{endpoint_name}', json=data)


if __name__ == '__main__':
    post_commit()
