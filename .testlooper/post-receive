#!/usr/bin/env python
import sys
import subprocess
import os
import requests

GIT_WATCHER_PORT = 9999

port = os.getenv('GIT_WATCHER_PORT', GIT_WATCHER_PORT)
endpoint_name = os.getenv('GIT_WATCHER_ENDPOINT_NAME', 'git_updater')

def post_receive():
    # Assumptions:
    #   - Linear history (no merges)
    #   - The repo directory is the same as the repo name in ODB.
    #   - Only branches are pushed (no tags)
    lines = sys.stdin.read().splitlines()
    for line in lines:
        old_revision, new_revision, ref_name = line.split()
        _, ref_type, ref = ref_name.split('/')

        # Deleted branch or tag
        if new_revision.strip() == '0'*40:
            # TODO push a delete event
            continue

        if old_revision.strip() == '0'*40:
            # We have to find out which commit started the branch (turns out to be tricky)
            branches = subprocess.check_output(['git', 'branch', '--format=%(refname:short)']).decode().strip().split('\n')
            branches = [b for b in branches if b != ref and not b.startswith('(HEAD detached at')]
            base_commits = [subprocess.check_output(['git', 'merge-base', b, new_revision]).decode().strip() for b in branches]
            base_commit = max(base_commits, key=lambda c: subprocess.check_output(['git', 'show', '-s', '--format=%ct', c]).decode().strip())
            commits = subprocess.check_output(['git', 'rev-list', base_commit + '..' + new_revision]).decode().strip().split('\n')[::-1]

        else:
            commits = subprocess.check_output(['git', 'rev-list', old_revision + '..' + new_revision]).decode().strip().split('\n')[::-1]

        # this hook is called from the .git directory, so navigate one up
        repository = os.path.dirname(subprocess.check_output(['git', 'rev-parse', '--show-toplevel']).decode().strip())
        repository = os.path.basename(repository)
        commit_data = []
        assert commits
        for commit in commits:
            commit_id = commit
            author_name = subprocess.check_output(['git', 'show', '-s', '--format=%an', commit_id]).decode().strip()
            author_email = subprocess.check_output(['git', 'show', '-s', '--format=%ae', commit_id]).decode().strip()
            commit_message = subprocess.check_output(['git', 'show', '-s', '--format=%s', commit_id]).decode().strip()

            commit_data.append({
                'id': commit_id,
                'message': commit_message,
                'url': f'http://localhost:{GIT_WATCHER_PORT}/{repository}/commit/{commit_id}',  # this is fake
                'author': {
                    'name': author_name,
                    'email': author_email,
                },
            })

        data = {
            'ref': ref_name,
            'before': old_revision,
            'after': new_revision,
            'created': old_revision.strip() == '0'*40,
            'deleted': new_revision.strip() == '0'*40,
            'repository': {
                'name': repository,
                'url': f'http://localhost:{GIT_WATCHER_PORT}/{repository}.git',  # this is fake
            },
            'pusher': {
                'name': author_name,
                'email': author_email,
            },
            'commits': commit_data
        }

        requests.post(f'http://localhost:{port}/{endpoint_name}', json=data)

if __name__ == '__main__':
    post_receive()
